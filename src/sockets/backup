io.on("connection", (socket) => {
        console.log("Client connected:", socket.id);

        socket.on("subscribeKline", async ({ symbol, interval }: SubscribePayload) => {
            const redis = await getRedisClient();
            const cacheKey = `kline:${symbol}:${interval}`;

            // ✅ บันทึก subscriber
            if (!subscribers.has(cacheKey)) {
                subscribers.set(cacheKey, new Set());
            }
            subscribers.get(cacheKey)!.add(socket.id);

            // ✅ ถ้ายังไม่มี timer ให้ symbol:interval นี้ → เริ่มดึงจาก Binance
            if (!timers.has(cacheKey)) {
                console.log(`Start fetching ${symbol} ${interval}`);
                await fetchKline(symbol, interval); // ดึงครั้งแรกทันที

                const timer = setInterval(async () => {
                    await fetchKline(symbol, interval); // ดึงใหม่ทุก 60s
                }, 60000);

                timers.set(cacheKey, timer);
            }

            // ✅ ส่งข้อมูลล่าสุดจาก redis กลับไปหา client
            const cached = await redis.get(cacheKey);
            if (cached) {
                socket.emit("klineUpdate", JSON.parse(cached));
            }

            // ✅ join room ตาม cacheKey
            socket.join(cacheKey);
        });

        // ✅ เมื่อ client disconnect
        socket.on("disconnect", async () => {
            console.log("Client disconnected:", socket.id);

            // เอา socket ออกจาก subscribers ทุกอันที่เคย join
            for (const [cacheKey, set] of subscribers.entries()) {
                if (set.has(socket.id)) {
                    set.delete(socket.id);

                    // ถ้าไม่มีใคร subscribe แล้ว → เคลียร์ timer + ลบ redis
                    if (set.size === 0) {
                        console.log(`No subscribers left for ${cacheKey}, cleaning up...`);
                        if (timers.has(cacheKey)) {
                            clearInterval(timers.get(cacheKey)!);
                            timers.delete(cacheKey);
                        }

                        const redis = await getRedisClient();
                        await redis.del(cacheKey);
                        subscribers.delete(cacheKey);
                    }
                }
            }
        });
    });