openapi: 3.0.0
info:
  title: nanobot
  version: 1.0.0
servers:
  -
    url: 'https://nanobot-mjgu.onrender.com'
  -
    url: 'localhost://'
tags:
  -
    name: coins
  -
    name: user
paths:
  /api/coin/list:
    post:
      tags:
        - coins
      summary: listcoins
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                page: 1
                limit: 10
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/coin/listprice:
    post:
      tags:
        - coins
      summary: listPrice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                page: 1
                limit: 10
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/coin/info/MDXBUSD:
    get:
      tags:
        - coins
      summary: infoExchange
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/coin/allprice:
    get:
      tags:
        - coins
      summary: allprice
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /000/api/coin/allredis:
    get:
      tags:
        - coins
      summary: allredis
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/user/register:
    post:
      tags:
        - user
      summary: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: user2
                email: user2@hotmail.com
                password: 12345678@User2
                confirmPassword: 12345678@User2
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/user/login:
    post:
      tags:
        - user
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: admin@hotmail.com
                password: 12345678@Admin
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/user/list:
    post:
      tags:
        - user
      summary: list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                page: 1
                limit: 10
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/user/get/68c3d27908893d0f6a38656c:
    get:
      tags:
        - user
      summary: getUserById
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/user/edit/68c3d28408893d0f6a38656f:
    put:
      tags:
        - user
      summary: editUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: admin
                email: admin@hotmail.com
                role: admin
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
  /api/user/delete/68c3f3d5c4ea6502c5deb2bb:
    delete:
      tags:
        - user
      summary: deleteUser
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json: {}
      security:
        -
          BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  -
    BearerAuth: []
